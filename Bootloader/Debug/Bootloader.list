
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001644  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080017dc  080017dc  000117dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e8  080017e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017f0  080017f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08001804  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001804  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bfc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000814  00000000  00000000  00021c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00022450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  000226c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001496  00000000  00000000  000228c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014cf  00000000  00000000  00023d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000050b6  00000000  00000000  0002522d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002a2e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008d4  00000000  00000000  0002a334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080017c4 	.word	0x080017c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080017c4 	.word	0x080017c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <BL_FeatchHostCmd>:
#include "FMI_Interface.h"

/********** Global Variables Deceleration**********/

void BL_FeatchHostCmd()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b0b2      	sub	sp, #200	; 0xc8
 80004e0:	af00      	add	r7, sp, #0
	u8 BL_HostBuffer[BL_HostSize] = {0};
 80004e2:	2300      	movs	r3, #0
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	22c4      	movs	r2, #196	; 0xc4
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f001 f961 	bl	80017b4 <memset>

	// Get Length
	 USART_u8ReceiveByteSynchBlocking (USARTxNum, &BL_HostBuffer[0]);
 80004f2:	463b      	mov	r3, r7
 80004f4:	4619      	mov	r1, r3
 80004f6:	4820      	ldr	r0, [pc, #128]	; (8000578 <BL_FeatchHostCmd+0x9c>)
 80004f8:	f001 f86a 	bl	80015d0 <USART_u8ReceiveByteSynchBlocking>

	// Get the Rest of Packet
	USART_voidReceiveArraySynch (USARTxNum , &BL_HostBuffer[1] , BL_HostBuffer[0]);
 80004fc:	783a      	ldrb	r2, [r7, #0]
 80004fe:	463b      	mov	r3, r7
 8000500:	3301      	adds	r3, #1
 8000502:	4619      	mov	r1, r3
 8000504:	481c      	ldr	r0, [pc, #112]	; (8000578 <BL_FeatchHostCmd+0x9c>)
 8000506:	f001 f87e 	bl	8001606 <USART_voidReceiveArraySynch>

	switch(BL_HostBuffer[1]) // Switch on the Command
 800050a:	787b      	ldrb	r3, [r7, #1]
 800050c:	3b10      	subs	r3, #16
 800050e:	2b06      	cmp	r3, #6
 8000510:	d829      	bhi.n	8000566 <BL_FeatchHostCmd+0x8a>
 8000512:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <BL_FeatchHostCmd+0x3c>)
 8000514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000518:	08000535 	.word	0x08000535
 800051c:	0800053f 	.word	0x0800053f
 8000520:	08000549 	.word	0x08000549
 8000524:	08000567 	.word	0x08000567
 8000528:	0800056d 	.word	0x0800056d
 800052c:	08000553 	.word	0x08000553
 8000530:	0800055d 	.word	0x0800055d
	{
		case CBL_GET_VER_CMD	: BL_voidGetVersion(BL_HostBuffer); break;
 8000534:	463b      	mov	r3, r7
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f876 	bl	8000628 <BL_voidGetVersion>
 800053c:	e017      	b.n	800056e <BL_FeatchHostCmd+0x92>
		case CBL_GET_HELP_CMD	: BL_voidGetHelp(BL_HostBuffer); 	break;
 800053e:	463b      	mov	r3, r7
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f8a7 	bl	8000694 <BL_voidGetHelp>
 8000546:	e012      	b.n	800056e <BL_FeatchHostCmd+0x92>
		case CBL_GET_CID_CMD	: BL_voidGetChipID(BL_HostBuffer); 	break;
 8000548:	463b      	mov	r3, r7
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f8dc 	bl	8000708 <BL_voidGetChipID>
 8000550:	e00d      	b.n	800056e <BL_FeatchHostCmd+0x92>
		case CBL_GO_TO_ADDR_CMD	: break;
		case CBL_FLASH_ERASE_CMD: BL_voidFlashErase(BL_HostBuffer); break;
 8000552:	463b      	mov	r3, r7
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f94b 	bl	80007f0 <BL_voidFlashErase>
 800055a:	e008      	b.n	800056e <BL_FeatchHostCmd+0x92>
		case CBL_MEM_WRITE_CMD	: BL_voidFlashWrite(BL_HostBuffer); break;
 800055c:	463b      	mov	r3, r7
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f98c 	bl	800087c <BL_voidFlashWrite>
 8000564:	e003      	b.n	800056e <BL_FeatchHostCmd+0x92>
		default: BL_voidSendNACK();
 8000566:	f000 f855 	bl	8000614 <BL_voidSendNACK>
	}
}
 800056a:	e000      	b.n	800056e <BL_FeatchHostCmd+0x92>
		case CBL_GO_TO_ADDR_CMD	: break;
 800056c:	bf00      	nop
}
 800056e:	bf00      	nop
 8000570:	37c8      	adds	r7, #200	; 0xc8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40011000 	.word	0x40011000

0800057c <BL_u8CRC>:

u8 BL_u8CRC(u8 *ptru8Data, u8 u8DataLength, u32 u32HostCRC)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	460b      	mov	r3, r1
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	72fb      	strb	r3, [r7, #11]
	u32 AccumualateCRC = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
	u8 Status = BL_NAKN;
 800058e:	23ab      	movs	r3, #171	; 0xab
 8000590:	76fb      	strb	r3, [r7, #27]
	u32 DataBuffer = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]

	for (int iterator = 0; iterator < u8DataLength; iterator++)
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	e00e      	b.n	80005ba <BL_u8CRC+0x3e>
	{
		DataBuffer = ptru8Data[iterator];
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	4413      	add	r3, r2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	613b      	str	r3, [r7, #16]
		AccumualateCRC = CRC_u32Accumulate(&DataBuffer, 1);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fa37 	bl	8000a20 <CRC_u32Accumulate>
 80005b2:	61f8      	str	r0, [r7, #28]
	for (int iterator = 0; iterator < u8DataLength; iterator++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	7afb      	ldrb	r3, [r7, #11]
 80005bc:	697a      	ldr	r2, [r7, #20]
 80005be:	429a      	cmp	r2, r3
 80005c0:	dbec      	blt.n	800059c <BL_u8CRC+0x20>
	}

	CRC_voidReset();
 80005c2:	f000 fa51 	bl	8000a68 <CRC_voidReset>

	if (AccumualateCRC == u32HostCRC)
 80005c6:	69fa      	ldr	r2, [r7, #28]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d101      	bne.n	80005d2 <BL_u8CRC+0x56>
		Status = BL_AKN;
 80005ce:	23cd      	movs	r3, #205	; 0xcd
 80005d0:	76fb      	strb	r3, [r7, #27]

	return Status;
 80005d2:	7efb      	ldrb	r3, [r7, #27]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <BL_voidSendACK>:

void BL_voidSendACK(u8 u8DataLength)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	u8 ACKValue[2] = {0};
 80005e6:	2300      	movs	r3, #0
 80005e8:	81bb      	strh	r3, [r7, #12]
	ACKValue[0] = BL_AKN;
 80005ea:	23cd      	movs	r3, #205	; 0xcd
 80005ec:	733b      	strb	r3, [r7, #12]
	ACKValue[1] = u8DataLength;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	737b      	strb	r3, [r7, #13]
	USART_voidTransmitByte (USARTxNum, ACKValue[0]);
 80005f2:	7b3b      	ldrb	r3, [r7, #12]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4806      	ldr	r0, [pc, #24]	; (8000610 <BL_voidSendACK+0x34>)
 80005f8:	f000 ffa8 	bl	800154c <USART_voidTransmitByte>
	USART_voidTransmitByte (USARTxNum, ACKValue[1]);
 80005fc:	7b7b      	ldrb	r3, [r7, #13]
 80005fe:	4619      	mov	r1, r3
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <BL_voidSendACK+0x34>)
 8000602:	f000 ffa3 	bl	800154c <USART_voidTransmitByte>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40011000 	.word	0x40011000

08000614 <BL_voidSendNACK>:

void BL_voidSendNACK()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	USART_voidTransmitByte (USARTxNum, BL_NAKN);
 8000618:	21ab      	movs	r1, #171	; 0xab
 800061a:	4802      	ldr	r0, [pc, #8]	; (8000624 <BL_voidSendNACK+0x10>)
 800061c:	f000 ff96 	bl	800154c <USART_voidTransmitByte>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40011000 	.word	0x40011000

08000628 <BL_voidGetVersion>:

void BL_voidGetVersion(u8 *ptru8HostBuffer)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	u8 Version[4] = {CBL_VENDOR_ID,
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <BL_voidGetVersion+0x64>)
 8000632:	60fb      	str	r3, [r7, #12]
						CBL_SW_MAJOR_VENRSION,
						CBL_SW_MINOR_VENRSION,
						CBL_SW_PATCH_VENRSION};
	u16 HostPacketLength = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	82fb      	strh	r3, [r7, #22]
	u32 CRCValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
	HostPacketLength = ptru8HostBuffer[0] + 1;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	3301      	adds	r3, #1
 8000644:	82fb      	strh	r3, [r7, #22]
	CRCValue = *((u32 *)(ptru8HostBuffer + HostPacketLength - CRC_Length));
 8000646:	8afb      	ldrh	r3, [r7, #22]
 8000648:	3b04      	subs	r3, #4
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	613b      	str	r3, [r7, #16]

	if (BL_AKN == BL_u8CRC(ptru8HostBuffer, HostPacketLength-CRC_Length, CRCValue))
 8000652:	8afb      	ldrh	r3, [r7, #22]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	3b04      	subs	r3, #4
 8000658:	b2db      	uxtb	r3, r3
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4619      	mov	r1, r3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff8c 	bl	800057c <BL_u8CRC>
 8000664:	4603      	mov	r3, r0
 8000666:	2bcd      	cmp	r3, #205	; 0xcd
 8000668:	d10a      	bne.n	8000680 <BL_voidGetVersion+0x58>
	{
		BL_voidSendACK(4);
 800066a:	2004      	movs	r0, #4
 800066c:	f7ff ffb6 	bl	80005dc <BL_voidSendACK>

		USART_u8TransmitArraySynch(USARTxNum, Version, sizeof(Version));
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2204      	movs	r2, #4
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <BL_voidGetVersion+0x68>)
 800067a:	f000 ff84 	bl	8001586 <USART_u8TransmitArraySynch>
	}
	else
		BL_voidSendNACK();
}
 800067e:	e001      	b.n	8000684 <BL_voidGetVersion+0x5c>
		BL_voidSendNACK();
 8000680:	f7ff ffc8 	bl	8000614 <BL_voidSendNACK>
}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	00010164 	.word	0x00010164
 8000690:	40011000 	.word	0x40011000

08000694 <BL_voidGetHelp>:

void BL_voidGetHelp(u8 *ptru8HostBuffer)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	u8 SuporrtedCMS[] = {CBL_GET_VER_CMD,
 800069c:	4a18      	ldr	r2, [pc, #96]	; (8000700 <BL_voidGetHelp+0x6c>)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							CBL_ED_W_PROTECT_CMD,
							CBL_MEM_READ_CMD,
							CBL_READ_SECTOR_STATUS_CMD,
							CBL_OTP_READ_CMD,
							CBL_CHANGE_ROP_Level_CMD};
	u16 HostPacketLength = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	83fb      	strh	r3, [r7, #30]
	u32 CRCValue = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
	HostPacketLength = ptru8HostBuffer[0] + 1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	3301      	adds	r3, #1
 80006b8:	83fb      	strh	r3, [r7, #30]
	CRCValue = *(u32 *)(ptru8HostBuffer + HostPacketLength - CRC_Length);
 80006ba:	8bfb      	ldrh	r3, [r7, #30]
 80006bc:	3b04      	subs	r3, #4
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	61bb      	str	r3, [r7, #24]

	if (BL_AKN == BL_u8CRC(ptru8HostBuffer, HostPacketLength-CRC_Length, CRCValue))
 80006c6:	8bfb      	ldrh	r3, [r7, #30]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	3b04      	subs	r3, #4
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	69ba      	ldr	r2, [r7, #24]
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff52 	bl	800057c <BL_u8CRC>
 80006d8:	4603      	mov	r3, r0
 80006da:	2bcd      	cmp	r3, #205	; 0xcd
 80006dc:	d10a      	bne.n	80006f4 <BL_voidGetHelp+0x60>
	{
		BL_voidSendACK((sizeof(SuporrtedCMS)/sizeof(SuporrtedCMS[0])));
 80006de:	200c      	movs	r0, #12
 80006e0:	f7ff ff7c 	bl	80005dc <BL_voidSendACK>
		USART_u8TransmitArraySynch(USARTxNum, SuporrtedCMS, sizeof(SuporrtedCMS));
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	220c      	movs	r2, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <BL_voidGetHelp+0x70>)
 80006ee:	f000 ff4a 	bl	8001586 <USART_u8TransmitArraySynch>
	}
	else
		BL_voidSendNACK();
}
 80006f2:	e001      	b.n	80006f8 <BL_voidGetHelp+0x64>
		BL_voidSendNACK();
 80006f4:	f7ff ff8e 	bl	8000614 <BL_voidSendNACK>
}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	080017dc 	.word	0x080017dc
 8000704:	40011000 	.word	0x40011000

08000708 <BL_voidGetChipID>:

void BL_voidGetChipID(u8 *ptru8HostBuffer)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	u16 ChipID = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	81fb      	strh	r3, [r7, #14]
	u16 HostPacketLength = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	82fb      	strh	r3, [r7, #22]
	u32 CRCValue = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
	HostPacketLength = ptru8HostBuffer[0] + 1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	3301      	adds	r3, #1
 8000724:	82fb      	strh	r3, [r7, #22]
	CRCValue = *(u32 *)(ptru8HostBuffer + HostPacketLength - CRC_Length);
 8000726:	8afb      	ldrh	r3, [r7, #22]
 8000728:	3b04      	subs	r3, #4
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	613b      	str	r3, [r7, #16]

	if (BL_AKN == BL_u8CRC(&ptru8HostBuffer[0], HostPacketLength-CRC_Length, CRCValue))
 8000732:	8afb      	ldrh	r3, [r7, #22]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	3b04      	subs	r3, #4
 8000738:	b2db      	uxtb	r3, r3
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff1c 	bl	800057c <BL_u8CRC>
 8000744:	4603      	mov	r3, r0
 8000746:	2bcd      	cmp	r3, #205	; 0xcd
 8000748:	d111      	bne.n	800076e <BL_voidGetChipID+0x66>
	{
		ChipID = (u16)DBGMCU_IDCODE_REG & IDCODE_MASK;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <BL_voidGetChipID+0x74>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b29b      	uxth	r3, r3
 8000750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000754:	b29b      	uxth	r3, r3
 8000756:	81fb      	strh	r3, [r7, #14]
		BL_voidSendACK(2);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff ff3f 	bl	80005dc <BL_voidSendACK>
		USART_u8TransmitArraySynch(USARTxNum, (u8*)&ChipID, 2);
 800075e:	f107 030e 	add.w	r3, r7, #14
 8000762:	2202      	movs	r2, #2
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <BL_voidGetChipID+0x78>)
 8000768:	f000 ff0d 	bl	8001586 <USART_u8TransmitArraySynch>
	}
	else
		BL_voidSendNACK();
}
 800076c:	e001      	b.n	8000772 <BL_voidGetChipID+0x6a>
		BL_voidSendNACK();
 800076e:	f7ff ff51 	bl	8000614 <BL_voidSendNACK>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e0042000 	.word	0xe0042000
 8000780:	40011000 	.word	0x40011000

08000784 <BL_u8ExcuteFlashErase>:

u8 BL_u8ExcuteFlashErase(u32 u32SectorNumber, u8 u8NumberOfSectors)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
	u8 SectorStatus = INVALID_SECTOR_NUMBER;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
//	else if((u32SectorNumber > FLASH_MAX_NUM_SECTROS) && (u8NumberOfSectors != CBL_FLASH_MASS_ERASE))
//		SectorStatus = INVALID_SECTOR_NUMBER;

	if(1)
	{
		if (u32SectorNumber == CBL_FLASH_MASS_ERASE)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2bff      	cmp	r3, #255	; 0xff
 8000798:	d102      	bne.n	80007a0 <BL_u8ExcuteFlashErase+0x1c>
			FlashErase.EraseType = FMI_MassErase;
 800079a:	2301      	movs	r3, #1
 800079c:	723b      	strb	r3, [r7, #8]
 800079e:	e015      	b.n	80007cc <BL_u8ExcuteFlashErase+0x48>

		else
		{
			FlashErase.EraseType = FMI_SectorErase;
 80007a0:	2300      	movs	r3, #0
 80007a2:	723b      	strb	r3, [r7, #8]
			FlashErase.StartSector = u32SectorNumber;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	72bb      	strb	r3, [r7, #10]

			u8 RemainingSectors = FLASH_MAX_NUM_SECTROS - u32SectorNumber;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f1c3 0308 	rsb	r3, r3, #8
 80007b2:	73bb      	strb	r3, [r7, #14]

			if(u32SectorNumber > RemainingSectors)
 80007b4:	7bbb      	ldrb	r3, [r7, #14]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d901      	bls.n	80007c0 <BL_u8ExcuteFlashErase+0x3c>
				u8NumberOfSectors = RemainingSectors;
 80007bc:	7bbb      	ldrb	r3, [r7, #14]
 80007be:	70fb      	strb	r3, [r7, #3]

			FlashErase.EndSector = u32SectorNumber + u8NumberOfSectors;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	4413      	add	r3, r2
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	72fb      	strb	r3, [r7, #11]
		}

		FlashErase.Parallelism = FMI_PAR_HWORD;
 80007cc:	2301      	movs	r3, #1
 80007ce:	727b      	strb	r3, [r7, #9]

		FMI_voidUnlock();
 80007d0:	f000 f966 	bl	8000aa0 <FMI_voidUnlock>
		FMI_voidErase(&FlashErase);
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f97b 	bl	8000ad4 <FMI_voidErase>
		FMI_voidLock();
 80007de:	f000 f94f 	bl	8000a80 <FMI_voidLock>

		SectorStatus = VALID_SECTOR_NUMBER;
 80007e2:	2301      	movs	r3, #1
 80007e4:	73fb      	strb	r3, [r7, #15]
	}
	return SectorStatus;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <BL_voidFlashErase>:

u8 BL_voidFlashErase(u8 *ptru8HostBuffer)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	u8 EraseStatus = UNSUCCESSFUL_ERASE;
 80007f8:	2302      	movs	r3, #2
 80007fa:	73fb      	strb	r3, [r7, #15]
	u16 HostPacketLength = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	81bb      	strh	r3, [r7, #12]
	u32 CRCValue = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
	HostPacketLength = ptru8HostBuffer[0] + 1;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	81bb      	strh	r3, [r7, #12]
	CRCValue = *(u32 *)(ptru8HostBuffer + HostPacketLength - CRC_Length);
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	3b04      	subs	r3, #4
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60bb      	str	r3, [r7, #8]

	if (BL_AKN == BL_u8CRC(ptru8HostBuffer, HostPacketLength-CRC_Length, CRCValue))
 800081a:	89bb      	ldrh	r3, [r7, #12]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	3b04      	subs	r3, #4
 8000820:	b2db      	uxtb	r3, r3
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	4619      	mov	r1, r3
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fea8 	bl	800057c <BL_u8CRC>
 800082c:	4603      	mov	r3, r0
 800082e:	2bcd      	cmp	r3, #205	; 0xcd
 8000830:	d114      	bne.n	800085c <BL_voidFlashErase+0x6c>
	{
		EraseStatus = BL_u8ExcuteFlashErase(*((u32*)&ptru8HostBuffer[2]), ptru8HostBuffer[6]);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3302      	adds	r3, #2
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3306      	adds	r3, #6
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4619      	mov	r1, r3
 8000840:	4610      	mov	r0, r2
 8000842:	f7ff ff9f 	bl	8000784 <BL_u8ExcuteFlashErase>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

		if (EraseStatus == VALID_SECTOR_NUMBER)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d101      	bne.n	8000854 <BL_voidFlashErase+0x64>
			EraseStatus = SUCCESSFUL_ERASE;
 8000850:	2303      	movs	r3, #3
 8000852:	73fb      	strb	r3, [r7, #15]

		BL_voidSendACK(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fec1 	bl	80005dc <BL_voidSendACK>
 800085a:	e003      	b.n	8000864 <BL_voidFlashErase+0x74>
	}
	else
	{
		BL_voidSendNACK();
 800085c:	f7ff feda 	bl	8000614 <BL_voidSendNACK>
		EraseStatus = UNSUCCESSFUL_ERASE;
 8000860:	2302      	movs	r3, #2
 8000862:	73fb      	strb	r3, [r7, #15]
	}

	USART_voidTransmitByte(USARTxNum, EraseStatus);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	4619      	mov	r1, r3
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <BL_voidFlashErase+0x88>)
 800086a:	f000 fe6f 	bl	800154c <USART_voidTransmitByte>
	return EraseStatus;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40011000 	.word	0x40011000

0800087c <BL_voidFlashWrite>:

u8 BL_voidFlashWrite(u8 *ptru8HostBuffer)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	u8 WriteStatus = FLASH_PAYLOAD_WRITE_FAILED;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
	u8 AddressStatus = INVALID_ADDRESS;
 8000888:	2304      	movs	r3, #4
 800088a:	73bb      	strb	r3, [r7, #14]
	u16 HostPacketLength = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	81bb      	strh	r3, [r7, #12]
	u32 CRCValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
	HostPacketLength = ptru8HostBuffer[0] + 1;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b29b      	uxth	r3, r3
 800089a:	3301      	adds	r3, #1
 800089c:	81bb      	strh	r3, [r7, #12]
	CRCValue = *(u32 *)(ptru8HostBuffer + HostPacketLength - CRC_Length);
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	3b04      	subs	r3, #4
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60bb      	str	r3, [r7, #8]

	if (BL_AKN == BL_u8CRC(ptru8HostBuffer, HostPacketLength-CRC_Length, CRCValue))
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3b04      	subs	r3, #4
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fe60 	bl	800057c <BL_u8CRC>
 80008bc:	4603      	mov	r3, r0
 80008be:	2bcd      	cmp	r3, #205	; 0xcd
 80008c0:	d11e      	bne.n	8000900 <BL_voidFlashWrite+0x84>
	{
		BL_voidSendACK(1);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff fe8a 	bl	80005dc <BL_voidSendACK>
		AddressStatus = BL_AddressVarification(*((u32*)&ptru8HostBuffer[2]));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3302      	adds	r3, #2
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f826 	bl	8000920 <BL_AddressVarification>
 80008d4:	4603      	mov	r3, r0
 80008d6:	73bb      	strb	r3, [r7, #14]
		if (AddressStatus == VALID_ADDRESS)
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	2b05      	cmp	r3, #5
 80008dc:	d10d      	bne.n	80008fa <BL_voidFlashWrite+0x7e>
			WriteStatus = BL_u8ExcuteFlashPayloadWrite((u16*)&ptru8HostBuffer[7] ,*((u32*)&ptru8HostBuffer[2]), ptru8HostBuffer[6]);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	1dd8      	adds	r0, r3, #7
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3302      	adds	r3, #2
 80008e6:	6819      	ldr	r1, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3306      	adds	r3, #6
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	f000 f83e 	bl	8000970 <BL_u8ExcuteFlashPayloadWrite>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e006      	b.n	8000908 <BL_voidFlashWrite+0x8c>
		else
			WriteStatus = FLASH_PAYLOAD_WRITE_FAILED;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	e003      	b.n	8000908 <BL_voidFlashWrite+0x8c>
	}
	else
	{
		BL_voidSendNACK();
 8000900:	f7ff fe88 	bl	8000614 <BL_voidSendNACK>
		WriteStatus = FLASH_PAYLOAD_WRITE_FAILED;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]
	}

	USART_voidTransmitByte(USARTxNum, WriteStatus);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	4619      	mov	r1, r3
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <BL_voidFlashWrite+0xa0>)
 800090e:	f000 fe1d 	bl	800154c <USART_voidTransmitByte>
	return WriteStatus;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40011000 	.word	0x40011000

08000920 <BL_AddressVarification>:

u8 BL_AddressVarification(u32 u32Address)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	u8 AddressStatus;

	if((u32Address >= FLASH_START) && (u32Address <= FLASH_END))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800092e:	d306      	bcc.n	800093e <BL_AddressVarification+0x1e>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <BL_AddressVarification+0x48>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d802      	bhi.n	800093e <BL_AddressVarification+0x1e>
		AddressStatus = VALID_ADDRESS;
 8000938:	2305      	movs	r3, #5
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e00c      	b.n	8000958 <BL_AddressVarification+0x38>
	else if((u32Address >= SRAM_START) && (u32Address <= SRAM_END))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000944:	d306      	bcc.n	8000954 <BL_AddressVarification+0x34>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a08      	ldr	r2, [pc, #32]	; (800096c <BL_AddressVarification+0x4c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d802      	bhi.n	8000954 <BL_AddressVarification+0x34>
		AddressStatus = VALID_ADDRESS;
 800094e:	2305      	movs	r3, #5
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	e001      	b.n	8000958 <BL_AddressVarification+0x38>
	else
		AddressStatus = INVALID_ADDRESS;
 8000954:	2304      	movs	r3, #4
 8000956:	73fb      	strb	r3, [r7, #15]

	return AddressStatus;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	08080000 	.word	0x08080000
 800096c:	02020000 	.word	0x02020000

08000970 <BL_u8ExcuteFlashPayloadWrite>:

u8 BL_u8ExcuteFlashPayloadWrite(u16 *ptru8Data, u32 u32StartAddress, u8 u8Length)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	4613      	mov	r3, r2
 800097c:	71fb      	strb	r3, [r7, #7]
	u8 PayloadStatus = FLASH_PAYLOAD_WRITE_FAILED;
 800097e:	2300      	movs	r3, #0
 8000980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// Address in Flash
	if((u32StartAddress >= FLASH_START) && (u32StartAddress <= FLASH_END))
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800098a:	d32b      	bcc.n	80009e4 <BL_u8ExcuteFlashPayloadWrite+0x74>
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <BL_u8ExcuteFlashPayloadWrite+0xac>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d827      	bhi.n	80009e4 <BL_u8ExcuteFlashPayloadWrite+0x74>
	{
		FMI_WriteTypeDef FlashProgram;
		FlashProgram.Parallelism = FMI_PAR_HWORD;
 8000994:	2301      	movs	r3, #1
 8000996:	763b      	strb	r3, [r7, #24]

		FMI_voidUnlock();
 8000998:	f000 f882 	bl	8000aa0 <FMI_voidUnlock>
		for(u8 iterator = 0; iterator < u8Length; u8Length++)
 800099c:	2300      	movs	r3, #0
 800099e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009a2:	e017      	b.n	80009d4 <BL_u8ExcuteFlashPayloadWrite+0x64>
		{
			FlashProgram.Data = ptru8Data[iterator];
 80009a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	61fb      	str	r3, [r7, #28]
			FlashProgram.BaseAddress = u32StartAddress+2;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	3302      	adds	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
			if (FMI_u8FlashWrite(&FlashProgram) == 0)
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f8fb 	bl	8000bb8 <FMI_u8FlashWrite>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <BL_u8ExcuteFlashPayloadWrite+0x5e>
				PayloadStatus = FLASH_PAYLOAD_WRITE_PASSED;
 80009c8:	2301      	movs	r3, #1
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(u8 iterator = 0; iterator < u8Length; u8Length++)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	3301      	adds	r3, #1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d3e2      	bcc.n	80009a4 <BL_u8ExcuteFlashPayloadWrite+0x34>
		}
		FMI_voidLock();
 80009de:	f000 f84f 	bl	8000a80 <FMI_voidLock>
	{
 80009e2:	e015      	b.n	8000a10 <BL_u8ExcuteFlashPayloadWrite+0xa0>
	}

	// Address in SRAM
	else
	{
		u8* DistinationSRAM = (u8*)u32StartAddress;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	623b      	str	r3, [r7, #32]

		for(u32 Iterator = 0; Iterator < u8Length; Iterator++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ec:	e00c      	b.n	8000a08 <BL_u8ExcuteFlashPayloadWrite+0x98>
			DistinationSRAM[Iterator] = ptru8Data[Iterator];
 80009ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	8819      	ldrh	r1, [r3, #0]
 80009f8:	6a3a      	ldr	r2, [r7, #32]
 80009fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fc:	4413      	add	r3, r2
 80009fe:	b2ca      	uxtb	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
		for(u32 Iterator = 0; Iterator < u8Length; Iterator++)
 8000a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a04:	3301      	adds	r3, #1
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d3ee      	bcc.n	80009ee <BL_u8ExcuteFlashPayloadWrite+0x7e>
	}

	return PayloadStatus;
 8000a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	08080000 	.word	0x08080000

08000a20 <CRC_u32Accumulate>:

#include "CRC_Interface.h"
#include "CRC_Register.h"

u32 CRC_u32Accumulate(u32* ptru32Data, u32 u32Length)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	u32 CRCResult = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
	for(u32 iterator = 0; iterator < u32Length; iterator++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e009      	b.n	8000a48 <CRC_u32Accumulate+0x28>
		CRC->DR = ptru32Data[iterator];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <CRC_u32Accumulate+0x44>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6013      	str	r3, [r2, #0]
	for(u32 iterator = 0; iterator < u32Length; iterator++)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3301      	adds	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d3f1      	bcc.n	8000a34 <CRC_u32Accumulate+0x14>

	CRCResult = CRC->DR;
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <CRC_u32Accumulate+0x44>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60bb      	str	r3, [r7, #8]

	return CRCResult;
 8000a56:	68bb      	ldr	r3, [r7, #8]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023000 	.word	0x40023000

08000a68 <CRC_voidReset>:

void CRC_voidReset(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	CRC->CR = 1;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <CRC_voidReset+0x14>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	609a      	str	r2, [r3, #8]
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40023000 	.word	0x40023000

08000a80 <FMI_voidLock>:
#include "FMI_Interface.h"
#include "FMI_Register.h"
#include "FMI_Private.h"

void FMI_voidLock(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	FMI->CR |= 1 << LOCK;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <FMI_voidLock+0x1c>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <FMI_voidLock+0x1c>)
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	6113      	str	r3, [r2, #16]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023c00 	.word	0x40023c00

08000aa0 <FMI_voidUnlock>:

void FMI_voidUnlock(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	if (GET_BIT(FMI->CR, LOCK) == 1)
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <FMI_voidUnlock+0x28>)
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	0fdb      	lsrs	r3, r3, #31
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d105      	bne.n	8000abe <FMI_voidUnlock+0x1e>
	{
		FMI->KEYR = FPECKEY1 ;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <FMI_voidUnlock+0x28>)
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <FMI_voidUnlock+0x2c>)
 8000ab6:	605a      	str	r2, [r3, #4]
		FMI->KEYR = FPECKEY2 ;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <FMI_voidUnlock+0x28>)
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <FMI_voidUnlock+0x30>)
 8000abc:	605a      	str	r2, [r3, #4]
	}
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40023c00 	.word	0x40023c00
 8000acc:	45670123 	.word	0x45670123
 8000ad0:	cdef89ab 	.word	0xcdef89ab

08000ad4 <FMI_voidErase>:
	FMI->OPTKEYR = OPTKEY1;
	FMI->OPTKEYR = OPTKEY2;
}

void FMI_voidErase(FMI_EraseTypeDef* FlashErase)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	// Wait for Busy Flag
	while(GET_BIT(FMI->SR, BSY) == 1) {}
 8000adc:	bf00      	nop
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	0c1b      	lsrs	r3, r3, #16
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d0f8      	beq.n	8000ade <FMI_voidErase+0xa>

	if(FlashErase->EraseType == FMI_SectorErase)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d135      	bne.n	8000b60 <FMI_voidErase+0x8c>
	{
		// Set the parallelism
		FMI->CR &=~((u32)(0b11<<PSIZE)) ;
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000afe:	6113      	str	r3, [r2, #16]
		FMI->CR |= ((FlashErase->Parallelism)<<PSIZE);
 8000b00:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	7852      	ldrb	r2, [r2, #1]
 8000b08:	0212      	lsls	r2, r2, #8
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4a29      	ldr	r2, [pc, #164]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	6113      	str	r3, [r2, #16]

		for(u8 Sector = FlashErase->StartSector; Sector < FlashErase->EndSector; Sector++)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	789b      	ldrb	r3, [r3, #2]
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e01c      	b.n	8000b54 <FMI_voidErase+0x80>
		{
			// Select Sector Number to erase
			FMI->CR &=~((u32)(0b1111 << SNB));
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b20:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8000b24:	6113      	str	r3, [r2, #16]
			FMI->CR |= (Sector << SNB);
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b28:	691b      	ldr	r3, [r3, #16]
 8000b2a:	7bfa      	ldrb	r2, [r7, #15]
 8000b2c:	00d2      	lsls	r2, r2, #3
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b32:	430b      	orrs	r3, r1
 8000b34:	6113      	str	r3, [r2, #16]

			// Select Sector Erase operation
			SET_BIT(FMI->CR, SER);
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6113      	str	r3, [r2, #16]

			// Start erase operation
			SET_BIT(FMI->CR, STRT);
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4c:	6113      	str	r3, [r2, #16]
		for(u8 Sector = FlashErase->StartSector; Sector < FlashErase->EndSector; Sector++)
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	3301      	adds	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	78db      	ldrb	r3, [r3, #3]
 8000b58:	7bfa      	ldrb	r2, [r7, #15]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3dd      	bcc.n	8000b1a <FMI_voidErase+0x46>
 8000b5e:	e00f      	b.n	8000b80 <FMI_voidErase+0xac>
		}
	}

	else if(FlashErase->EraseType == FMI_MassErase)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d10b      	bne.n	8000b80 <FMI_voidErase+0xac>
	{
		// Select Mass Erase operation
		SET_BIT(FMI->CR, MER);
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6113      	str	r3, [r2, #16]

		// Start erase operation
		SET_BIT(FMI->CR, STRT);
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b7e:	6113      	str	r3, [r2, #16]
	}

	// Wait for Busy Flag
	while(GET_BIT(FMI->SR, BSY) == 1) {}
 8000b80:	bf00      	nop
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d0f8      	beq.n	8000b82 <FMI_voidErase+0xae>

	// Clear EOP flag   */
	SET_BIT(FMI->SR, EOP);
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	60d3      	str	r3, [r2, #12]

	// DeSelect Erase Operation
	CLR_BIT(FMI->CR, SER);
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <FMI_voidErase+0xe0>)
 8000ba2:	f023 0302 	bic.w	r3, r3, #2
 8000ba6:	6113      	str	r3, [r2, #16]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40023c00 	.word	0x40023c00

08000bb8 <FMI_u8FlashWrite>:

u8 FMI_u8FlashWrite(FMI_WriteTypeDef *FlashProgram)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	u8 ErrorState = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]

	// Wait if Flash is Busy
	while(GET_BIT(FMI->SR, BSY) == 1) {};
 8000bc4:	bf00      	nop
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	0c1b      	lsrs	r3, r3, #16
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d0f8      	beq.n	8000bc6 <FMI_u8FlashWrite+0xe>

	// Set the parallelism
	FMI->CR &=~((u32)(0b11<<PSIZE)) ;
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bde:	6113      	str	r3, [r2, #16]
	FMI->CR |= ((FlashProgram->Parallelism)<<PSIZE);
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	7912      	ldrb	r2, [r2, #4]
 8000be8:	0212      	lsls	r2, r2, #8
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a2c      	ldr	r2, [pc, #176]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6113      	str	r3, [r2, #16]

	// Activate Programming Mode
	SET_BIT(FMI->CR, PG);
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6113      	str	r3, [r2, #16]

	// Check the data size according to parallelism
	switch(FlashProgram->Parallelism)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	791b      	ldrb	r3, [r3, #4]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d82f      	bhi.n	8000c66 <FMI_u8FlashWrite+0xae>
 8000c06:	a201      	add	r2, pc, #4	; (adr r2, 8000c0c <FMI_u8FlashWrite+0x54>)
 8000c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0c:	08000c1d 	.word	0x08000c1d
 8000c10:	08000c2b 	.word	0x08000c2b
 8000c14:	08000c39 	.word	0x08000c39
 8000c18:	08000c47 	.word	0x08000c47
	{
		//Start writing
		case FMI_PAR_BYTE	:*((volatile u8*)FlashProgram->BaseAddress) = (u8)FlashProgram->Data;	break;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e01f      	b.n	8000c6a <FMI_u8FlashWrite+0xb2>
		case FMI_PAR_HWORD 	:*((volatile u16*)FlashProgram->BaseAddress) = (u16)FlashProgram->Data;	break;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	b292      	uxth	r2, r2
 8000c34:	801a      	strh	r2, [r3, #0]
 8000c36:	e018      	b.n	8000c6a <FMI_u8FlashWrite+0xb2>
		case FMI_PAR_WORD 	:*((volatile u32*)FlashProgram->BaseAddress) = (u32)FlashProgram->Data;	break;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	e011      	b.n	8000c6a <FMI_u8FlashWrite+0xb2>
		case FMI_PAR_DWORD 	:
			*(u32*)FlashProgram->BaseAddress = (u32*)FlashProgram->Data;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	6013      	str	r3, [r2, #0]
			*(u32*)(FlashProgram->BaseAddress+4) = (u32*)(FlashProgram->Data >> 32);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	3204      	adds	r2, #4
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	2220      	movs	r2, #32
 8000c60:	40d3      	lsrs	r3, r2
 8000c62:	600b      	str	r3, [r1, #0]
			break;
 8000c64:	e001      	b.n	8000c6a <FMI_u8FlashWrite+0xb2>

		default : ErrorState = FMI_ParallelismError;
 8000c66:	230a      	movs	r3, #10
 8000c68:	73fb      	strb	r3, [r7, #15]
	}

	// Wait for Busy Flag
	while(GET_BIT(FMI->SR, BSY) == 1) {}
 8000c6a:	bf00      	nop
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0c1b      	lsrs	r3, r3, #16
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d0f8      	beq.n	8000c6c <FMI_u8FlashWrite+0xb4>

	// Clear EOP flag
	SET_BIT(FMI->SR, EOP);
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	60d3      	str	r3, [r2, #12]

	// Deactivate programming mode
	CLR_BIT(FMI->CR, PG);
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <FMI_u8FlashWrite+0xe8>)
 8000c8c:	f023 0301 	bic.w	r3, r3, #1
 8000c90:	6113      	str	r3, [r2, #16]

	return ErrorState;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <GPIO_u8SetGPIOPinMode>:
#include "GPIO_Private.h"
#include "GPIO_Register.h"
#include "GPIO_Interface.h"

u8 GPIO_u8SetGPIOPinMode(u8 u8Port, u8 u8Pin, u8 u8Mode)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d102      	bne.n	8000cc6 <GPIO_u8SetGPIOPinMode+0x22>
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	2b0f      	cmp	r3, #15
 8000cc4:	d90e      	bls.n	8000ce4 <GPIO_u8SetGPIOPinMode+0x40>
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d102      	bne.n	8000cd2 <GPIO_u8SetGPIOPinMode+0x2e>
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	2b0f      	cmp	r3, #15
 8000cd0:	d908      	bls.n	8000ce4 <GPIO_u8SetGPIOPinMode+0x40>
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d157      	bne.n	8000d88 <GPIO_u8SetGPIOPinMode+0xe4>
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b0c      	cmp	r3, #12
 8000cdc:	d802      	bhi.n	8000ce4 <GPIO_u8SetGPIOPinMode+0x40>
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d851      	bhi.n	8000d88 <GPIO_u8SetGPIOPinMode+0xe4>
	{
		u8Pin<<=1; // Multiply by 2
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	71bb      	strb	r3, [r7, #6]
		switch (u8Port)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d032      	beq.n	8000d56 <GPIO_u8SetGPIOPinMode+0xb2>
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	dc45      	bgt.n	8000d80 <GPIO_u8SetGPIOPinMode+0xdc>
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d002      	beq.n	8000cfe <GPIO_u8SetGPIOPinMode+0x5a>
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d016      	beq.n	8000d2a <GPIO_u8SetGPIOPinMode+0x86>
 8000cfc:	e040      	b.n	8000d80 <GPIO_u8SetGPIOPinMode+0xdc>
		{
			case GPIO_PORTA:
				GPIOA->MODER &= (~(0b11<<u8Pin)); // Resets the two Values
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <GPIO_u8SetGPIOPinMode+0xf8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	79ba      	ldrb	r2, [r7, #6]
 8000d04:	2103      	movs	r1, #3
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	43d2      	mvns	r2, r2
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <GPIO_u8SetGPIOPinMode+0xf8>)
 8000d10:	400b      	ands	r3, r1
 8000d12:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= u8Mode<<u8Pin;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <GPIO_u8SetGPIOPinMode+0xf8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	7979      	ldrb	r1, [r7, #5]
 8000d1a:	79ba      	ldrb	r2, [r7, #6]
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	4611      	mov	r1, r2
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <GPIO_u8SetGPIOPinMode+0xf8>)
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6013      	str	r3, [r2, #0]
				break;
 8000d28:	e02d      	b.n	8000d86 <GPIO_u8SetGPIOPinMode+0xe2>

			case GPIO_PORTB:
				GPIOB->MODER &= (~(0b11<<u8Pin)); // Resets the two Values
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <GPIO_u8SetGPIOPinMode+0xfc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	79ba      	ldrb	r2, [r7, #6]
 8000d30:	2103      	movs	r1, #3
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	43d2      	mvns	r2, r2
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <GPIO_u8SetGPIOPinMode+0xfc>)
 8000d3c:	400b      	ands	r3, r1
 8000d3e:	6013      	str	r3, [r2, #0]
				GPIOB->MODER |= u8Mode<<u8Pin;
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <GPIO_u8SetGPIOPinMode+0xfc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	7979      	ldrb	r1, [r7, #5]
 8000d46:	79ba      	ldrb	r2, [r7, #6]
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <GPIO_u8SetGPIOPinMode+0xfc>)
 8000d50:	430b      	orrs	r3, r1
 8000d52:	6013      	str	r3, [r2, #0]
				break;
 8000d54:	e017      	b.n	8000d86 <GPIO_u8SetGPIOPinMode+0xe2>
			case GPIO_PORTC:
				GPIOC->MODER &= (~(0b11<<u8Pin)); // Resets the two Values
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <GPIO_u8SetGPIOPinMode+0x100>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	79ba      	ldrb	r2, [r7, #6]
 8000d5c:	2103      	movs	r1, #3
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	43d2      	mvns	r2, r2
 8000d64:	4611      	mov	r1, r2
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <GPIO_u8SetGPIOPinMode+0x100>)
 8000d68:	400b      	ands	r3, r1
 8000d6a:	6013      	str	r3, [r2, #0]
				GPIOC->MODER |= u8Mode<<u8Pin;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <GPIO_u8SetGPIOPinMode+0x100>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	7979      	ldrb	r1, [r7, #5]
 8000d72:	79ba      	ldrb	r2, [r7, #6]
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <GPIO_u8SetGPIOPinMode+0x100>)
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	6013      	str	r3, [r2, #0]
			default:
				u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000d80:	2304      	movs	r3, #4
 8000d82:	73fb      	strb	r3, [r7, #15]
				break;
 8000d84:	bf00      	nop
		switch (u8Port)
 8000d86:	e001      	b.n	8000d8c <GPIO_u8SetGPIOPinMode+0xe8>
		}
	}
	else
		u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	73fb      	strb	r3, [r7, #15]
	return u8ErrorState;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020800 	.word	0x40020800

08000da8 <GPIO_u8SetPullResMode>:

	return u8ErrorState;
}

u8 GPIO_u8SetPullResMode(u8 u8Port, u8 u8Pin, u8 u8Mode)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	460b      	mov	r3, r1
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	4613      	mov	r3, r2
 8000db8:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d102      	bne.n	8000dca <GPIO_u8SetPullResMode+0x22>
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	d90e      	bls.n	8000de8 <GPIO_u8SetPullResMode+0x40>
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d102      	bne.n	8000dd6 <GPIO_u8SetPullResMode+0x2e>
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d908      	bls.n	8000de8 <GPIO_u8SetPullResMode+0x40>
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d157      	bne.n	8000e8c <GPIO_u8SetPullResMode+0xe4>
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	d802      	bhi.n	8000de8 <GPIO_u8SetPullResMode+0x40>
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d851      	bhi.n	8000e8c <GPIO_u8SetPullResMode+0xe4>
	{
		u8Pin<<=1; // Multiply by 2
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	71bb      	strb	r3, [r7, #6]
		switch (u8Port)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d032      	beq.n	8000e5a <GPIO_u8SetPullResMode+0xb2>
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	dc45      	bgt.n	8000e84 <GPIO_u8SetPullResMode+0xdc>
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d002      	beq.n	8000e02 <GPIO_u8SetPullResMode+0x5a>
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d016      	beq.n	8000e2e <GPIO_u8SetPullResMode+0x86>
 8000e00:	e040      	b.n	8000e84 <GPIO_u8SetPullResMode+0xdc>
		{
			case GPIO_PORTA:
				GPIOA->PUPDR &= (~(0b11<<u8Pin)); // Resets the two Values
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <GPIO_u8SetPullResMode+0xf8>)
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	79ba      	ldrb	r2, [r7, #6]
 8000e08:	2103      	movs	r1, #3
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	43d2      	mvns	r2, r2
 8000e10:	4611      	mov	r1, r2
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <GPIO_u8SetPullResMode+0xf8>)
 8000e14:	400b      	ands	r3, r1
 8000e16:	60d3      	str	r3, [r2, #12]
				GPIOA->PUPDR |= u8Mode<<u8Pin;
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <GPIO_u8SetPullResMode+0xf8>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	7979      	ldrb	r1, [r7, #5]
 8000e1e:	79ba      	ldrb	r2, [r7, #6]
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <GPIO_u8SetPullResMode+0xf8>)
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	60d3      	str	r3, [r2, #12]
				break;
 8000e2c:	e02d      	b.n	8000e8a <GPIO_u8SetPullResMode+0xe2>

			case GPIO_PORTB:
				GPIOB->PUPDR &= (~(0b11<<u8Pin)); // Resets the two Values
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <GPIO_u8SetPullResMode+0xfc>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	79ba      	ldrb	r2, [r7, #6]
 8000e34:	2103      	movs	r1, #3
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	43d2      	mvns	r2, r2
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <GPIO_u8SetPullResMode+0xfc>)
 8000e40:	400b      	ands	r3, r1
 8000e42:	60d3      	str	r3, [r2, #12]
				GPIOB->PUPDR |= u8Mode<<u8Pin;
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <GPIO_u8SetPullResMode+0xfc>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	7979      	ldrb	r1, [r7, #5]
 8000e4a:	79ba      	ldrb	r2, [r7, #6]
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <GPIO_u8SetPullResMode+0xfc>)
 8000e54:	430b      	orrs	r3, r1
 8000e56:	60d3      	str	r3, [r2, #12]
				break;
 8000e58:	e017      	b.n	8000e8a <GPIO_u8SetPullResMode+0xe2>
			case GPIO_PORTC:
				GPIOC->PUPDR &= (~(0b11<<u8Pin)); // Resets the two Values
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <GPIO_u8SetPullResMode+0x100>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	79ba      	ldrb	r2, [r7, #6]
 8000e60:	2103      	movs	r1, #3
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	43d2      	mvns	r2, r2
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <GPIO_u8SetPullResMode+0x100>)
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	60d3      	str	r3, [r2, #12]
				GPIOC->PUPDR |= u8Mode<<u8Pin;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <GPIO_u8SetPullResMode+0x100>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	7979      	ldrb	r1, [r7, #5]
 8000e76:	79ba      	ldrb	r2, [r7, #6]
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <GPIO_u8SetPullResMode+0x100>)
 8000e80:	430b      	orrs	r3, r1
 8000e82:	60d3      	str	r3, [r2, #12]
			default:
				u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000e84:	2304      	movs	r3, #4
 8000e86:	73fb      	strb	r3, [r7, #15]
				break;
 8000e88:	bf00      	nop
		switch (u8Port)
 8000e8a:	e001      	b.n	8000e90 <GPIO_u8SetPullResMode+0xe8>
		}
	}
	else
		u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	73fb      	strb	r3, [r7, #15]
	return u8ErrorState;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	40020800 	.word	0x40020800

08000eac <GPIO_voidSetAlternativeFunction>:

u8 GPIO_voidSetAlternativeFunction(u8 u8Port, u8 u8Pin, u8 u8AlternateFunction)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	71bb      	strb	r3, [r7, #6]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	717b      	strb	r3, [r7, #5]
	u8 u8ErrorState = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
	if ( (u8Port == GPIO_PORTA && u8Pin <= GPIO_PIN15 ) || (u8Port == GPIO_PORTB && u8Pin <= GPIO_PIN15 ) || ( u8Port == GPIO_PORTC && ( u8Pin >= GPIO_PIN13 ||  u8Pin <= GPIO_PIN15 ) ) ) // Check Ranges
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d102      	bne.n	8000ece <GPIO_voidSetAlternativeFunction+0x22>
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	d910      	bls.n	8000ef0 <GPIO_voidSetAlternativeFunction+0x44>
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d102      	bne.n	8000eda <GPIO_voidSetAlternativeFunction+0x2e>
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	d90a      	bls.n	8000ef0 <GPIO_voidSetAlternativeFunction+0x44>
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	f040 80bf 	bne.w	8001060 <GPIO_voidSetAlternativeFunction+0x1b4>
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	2b0c      	cmp	r3, #12
 8000ee6:	d803      	bhi.n	8000ef0 <GPIO_voidSetAlternativeFunction+0x44>
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	f200 80b8 	bhi.w	8001060 <GPIO_voidSetAlternativeFunction+0x1b4>
	{
		if (u8Pin < 8)
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	2b07      	cmp	r3, #7
 8000ef4:	d854      	bhi.n	8000fa0 <GPIO_voidSetAlternativeFunction+0xf4>
		{
			switch (u8Port)
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d036      	beq.n	8000f6a <GPIO_voidSetAlternativeFunction+0xbe>
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	dc4c      	bgt.n	8000f9a <GPIO_voidSetAlternativeFunction+0xee>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d002      	beq.n	8000f0a <GPIO_voidSetAlternativeFunction+0x5e>
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d018      	beq.n	8000f3a <GPIO_voidSetAlternativeFunction+0x8e>
 8000f08:	e047      	b.n	8000f9a <GPIO_voidSetAlternativeFunction+0xee>
			{
				case GPIO_PORTA:
					GPIOA->AFRL &= ~(0b1111<<(u8Pin*4));
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	79ba      	ldrb	r2, [r7, #6]
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	210f      	movs	r1, #15
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a55      	ldr	r2, [pc, #340]	; (8001074 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000f1e:	400b      	ands	r3, r1
 8000f20:	6213      	str	r3, [r2, #32]
					GPIOA->AFRL |= (u8AlternateFunction<<(u8Pin*4));
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	7979      	ldrb	r1, [r7, #5]
 8000f28:	79ba      	ldrb	r2, [r7, #6]
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	4611      	mov	r1, r2
 8000f32:	4a50      	ldr	r2, [pc, #320]	; (8001074 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6213      	str	r3, [r2, #32]
					break;
 8000f38:	e091      	b.n	800105e <GPIO_voidSetAlternativeFunction+0x1b2>

				case GPIO_PORTB:
					GPIOB->AFRL &= ~(0b1111<<(u8Pin*4));
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	79ba      	ldrb	r2, [r7, #6]
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	210f      	movs	r1, #15
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	43d2      	mvns	r2, r2
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4a4a      	ldr	r2, [pc, #296]	; (8001078 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000f4e:	400b      	ands	r3, r1
 8000f50:	6213      	str	r3, [r2, #32]
					GPIOB->AFRL |= (u8AlternateFunction<<(u8Pin*4));
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	7979      	ldrb	r1, [r7, #5]
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	4611      	mov	r1, r2
 8000f62:	4a45      	ldr	r2, [pc, #276]	; (8001078 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6213      	str	r3, [r2, #32]
					break;
 8000f68:	e079      	b.n	800105e <GPIO_voidSetAlternativeFunction+0x1b2>

				case GPIO_PORTC:
					GPIOC->AFRL &= ~(0b1111<<(u8Pin*4));
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	79ba      	ldrb	r2, [r7, #6]
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	210f      	movs	r1, #15
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	43d2      	mvns	r2, r2
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a3f      	ldr	r2, [pc, #252]	; (800107c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000f7e:	400b      	ands	r3, r1
 8000f80:	6213      	str	r3, [r2, #32]
					GPIOC->AFRL |= (u8AlternateFunction<<(u8Pin*4));
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	7979      	ldrb	r1, [r7, #5]
 8000f88:	79ba      	ldrb	r2, [r7, #6]
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a3a      	ldr	r2, [pc, #232]	; (800107c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6213      	str	r3, [r2, #32]
					break;
 8000f98:	e061      	b.n	800105e <GPIO_voidSetAlternativeFunction+0x1b2>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e05e      	b.n	800105e <GPIO_voidSetAlternativeFunction+0x1b2>
			}
		}

		else if (u8Pin >= 8)
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	d95a      	bls.n	800105c <GPIO_voidSetAlternativeFunction+0x1b0>
		{
			switch (u8Port)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d03a      	beq.n	8001022 <GPIO_voidSetAlternativeFunction+0x176>
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	dc52      	bgt.n	8001056 <GPIO_voidSetAlternativeFunction+0x1aa>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d002      	beq.n	8000fba <GPIO_voidSetAlternativeFunction+0x10e>
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d01a      	beq.n	8000fee <GPIO_voidSetAlternativeFunction+0x142>
 8000fb8:	e04d      	b.n	8001056 <GPIO_voidSetAlternativeFunction+0x1aa>
			{
				case GPIO_PORTA:
					GPIOA->AFRH &= ~(0b1111<<((u8Pin-8)*4));
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	3a08      	subs	r2, #8
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	6253      	str	r3, [r2, #36]	; 0x24
					GPIOA->AFRH |= (u8AlternateFunction<<(u8Pin-8)*4);
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	7979      	ldrb	r1, [r7, #5]
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	3a08      	subs	r2, #8
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4a23      	ldr	r2, [pc, #140]	; (8001074 <GPIO_voidSetAlternativeFunction+0x1c8>)
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6253      	str	r3, [r2, #36]	; 0x24
					break;
 8000fec:	e037      	b.n	800105e <GPIO_voidSetAlternativeFunction+0x1b2>

				case GPIO_PORTB:
					GPIOB->AFRH &= ~(0b1111<<(u8Pin-8)*4);
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	79ba      	ldrb	r2, [r7, #6]
 8000ff4:	3a08      	subs	r2, #8
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	43d2      	mvns	r2, r2
 8001000:	4611      	mov	r1, r2
 8001002:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <GPIO_voidSetAlternativeFunction+0x1cc>)
 8001004:	400b      	ands	r3, r1
 8001006:	6253      	str	r3, [r2, #36]	; 0x24
					GPIOB->AFRH |= (u8AlternateFunction<<(u8Pin-8)*4);
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <GPIO_voidSetAlternativeFunction+0x1cc>)
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	7979      	ldrb	r1, [r7, #5]
 800100e:	79ba      	ldrb	r2, [r7, #6]
 8001010:	3a08      	subs	r2, #8
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	4611      	mov	r1, r2
 800101a:	4a17      	ldr	r2, [pc, #92]	; (8001078 <GPIO_voidSetAlternativeFunction+0x1cc>)
 800101c:	430b      	orrs	r3, r1
 800101e:	6253      	str	r3, [r2, #36]	; 0x24
					break;
 8001020:	e01d      	b.n	800105e <GPIO_voidSetAlternativeFunction+0x1b2>

				case GPIO_PORTC:
					GPIOC->AFRH &= ~(0b1111<<(u8Pin-8)*4);
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	79ba      	ldrb	r2, [r7, #6]
 8001028:	3a08      	subs	r2, #8
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	210f      	movs	r1, #15
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	43d2      	mvns	r2, r2
 8001034:	4611      	mov	r1, r2
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8001038:	400b      	ands	r3, r1
 800103a:	6253      	str	r3, [r2, #36]	; 0x24
					GPIOC->AFRH |= (u8AlternateFunction<<(u8Pin-8)*4);
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <GPIO_voidSetAlternativeFunction+0x1d0>)
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	7979      	ldrb	r1, [r7, #5]
 8001042:	79ba      	ldrb	r2, [r7, #6]
 8001044:	3a08      	subs	r2, #8
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	fa01 f202 	lsl.w	r2, r1, r2
 800104c:	4611      	mov	r1, r2
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <GPIO_voidSetAlternativeFunction+0x1d0>)
 8001050:	430b      	orrs	r3, r1
 8001052:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8001054:	e003      	b.n	800105e <GPIO_voidSetAlternativeFunction+0x1b2>
				default: u8ErrorState = GPIO_ErrorCheckPerphiralRange; break;
 8001056:	2304      	movs	r3, #4
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e000      	b.n	800105e <GPIO_voidSetAlternativeFunction+0x1b2>
			}
		}
 800105c:	bf00      	nop
		if (u8Pin < 8)
 800105e:	e001      	b.n	8001064 <GPIO_voidSetAlternativeFunction+0x1b8>
	}

	else
		u8ErrorState = GPIO_ErrorCheckPerphiralRange;
 8001060:	2304      	movs	r3, #4
 8001062:	73fb      	strb	r3, [r7, #15]

	return u8ErrorState;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800

08001080 <RCC_u8SystemClkInitialization>:
#include "RCC_Register.h"
#include "RCC_Interface.h"


void RCC_u8SystemClkInitialization (void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	/** Initialize CSS **/
	#if CSSBit == 1
	SET_BIT(RCC->CR, CSSON);
 8001084:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800108a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800108e:	6013      	str	r3, [r2, #0]
	/** Initialize HSE Clock Bypass **/
	#if HSEBYPBit == 1
	SET_BIT(RCC->CR, HSEBYP);
	
	#elif HSEBYPBit == 0
	CLR_BIT(RCC->CR, HSEBYP);
 8001090:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]
	#endif
	
	/** Select System Clock **/
	// HSI
	#if HSIBit == 1
	SET_BIT(RCC->CR, HSION);
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a44      	ldr	r2, [pc, #272]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]
	// HSE
	#if HSEBit == 1
	SET_BIT(RCC->CR, HSEON);
	
	#elif HSEBit == 0
	CLR_BIT(RCC->CR, HSEON);
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a41      	ldr	r2, [pc, #260]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
	// PLL
	#if PLLBit == 1
	SET_BIT(RCC->CR, PLLON);
	
	#elif PLLBit == 0
	CLR_BIT(RCC->CR, PLLON);
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a3e      	ldr	r2, [pc, #248]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010be:	6013      	str	r3, [r2, #0]
	// PLLI2S
	#if PLLI2SBit == 1
	SET_BIT(RCC->CR, PLLI2SON);
	
	#elif PLLI2SBit == 0
	CLR_BIT(RCC->CR, PLLI2SON);
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a3b      	ldr	r2, [pc, #236]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80010ca:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CFGR, HPRE2);
	SET_BIT(RCC->CFGR, HPRE1);
	SET_BIT(RCC->CFGR, HPRE0);
	
	#elif AHBPreScaler == 1 // clock not divided
	CLR_BIT(RCC->CFGR, HPRE3);
 80010cc:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010d6:	6093      	str	r3, [r2, #8]
	SET_BIT(RCC->CFGR, PPRE12);
	SET_BIT(RCC->CFGR, PPRE11);
	SET_BIT(RCC->CFGR, PPRE10);
	
	#elif APB1PreScaler == 1 // clock not divided
	CLR_BIT(RCC->CFGR, PPRE12);
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010e2:	6093      	str	r3, [r2, #8]
	SET_BIT(RCC->CFGR, PPRE22);
	SET_BIT(RCC->CFGR, PPRE21);
	SET_BIT(RCC->CFGR, PPRE20);
	
	#elif APB2PreScaler == 1 // clock not divided
	CLR_BIT(RCC->CFGR, PPRE22);
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a32      	ldr	r2, [pc, #200]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010ee:	6093      	str	r3, [r2, #8]
	#error "Wrong PPRE2 Configuration"
	#endif
		
	/** Initialize PLL Configuration **/
	// PLLM
	RCC->PLLCFGR &= 0b11111111111111111111111111000000; // use bit masking
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a2f      	ldr	r2, [pc, #188]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010fa:	6053      	str	r3, [r2, #4]
	
	#elif  DivisionPLLM > 63
	#error "Wrong PLLM Configuration"

	#else
	RCC->PLLCFGR |= DivisionPLLM;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a2c      	ldr	r2, [pc, #176]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001102:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001106:	6053      	str	r3, [r2, #4]
	#endif
		
	// PLLN
	RCC->PLLCFGR &= 0b11111111111111111000000000111111; // use bit masking
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a29      	ldr	r2, [pc, #164]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800110e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001116:	6053      	str	r3, [r2, #4]
	
	#elif MultiplicationPLLN > 432
	#error "Wrong PLLN Configuration"
	
	#else
	RCC->PLLCFGR |= (MultiplicationPLLN << 6); // left shifted by 6 to apply bit masking
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800111e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001122:	6053      	str	r3, [r2, #4]
	#endif
	
	// PLLP
	#if DivisionPLLP == 2
	CLR_BIT(RCC->PLLCFGR, PLLP0);
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800112a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112e:	6053      	str	r3, [r2, #4]
	CLR_BIT(RCC->PLLCFGR, PLLP1);
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001136:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800113a:	6053      	str	r3, [r2, #4]
	#error "Wrong PLLP Configuration"
	#endif
	
	/** Initialize PLL Clock Source **/
	#if PLLSource == 0
	CLR_BIT(RCC->PLLCFGR, PLLSRC);
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001142:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001146:	6053      	str	r3, [r2, #4]
	#error "Wrong PLLSRC Configuration"
	#endif

	/** Initialize MCO1PRE **/
	#if MCO1PreScaler == 0
	CLR_BIT(RCC->CFGR, MCO1PRE2);
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800114e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001152:	6093      	str	r3, [r2, #8]
	#error "Wrong MCO1PRE Configuration"
	#endif
	
	/** Initialize MCO2PRE **/
	#if MCO2PreScaler == 0
	CLR_BIT(RCC->CFGR, MCO2PRE2);
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800115a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800115e:	6093      	str	r3, [r2, #8]
	#error "Wrong MCO2PRE Configuration"
	#endif
	
	/** Initialize MCON1 **/
	#if MCO1CLK == 0
	CLR_BIT(RCC->CFGR, MCO10);
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800116a:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR, MCO11);
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001172:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001176:	6093      	str	r3, [r2, #8]
	#error "Wrong MCON1 Configuration"
	#endif
	
	/** Initialize MCON2 **/
	#if MCO2CLK == 0
	CLR_BIT(RCC->CFGR, MCO20);
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800117e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001182:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR, MCO21);
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800118a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800118e:	6093      	str	r3, [r2, #8]
	#endif
	
	/** Enable The Selected Clock **/
	// SW
	#if SysClkSw == 0
	CLR_BIT(RCC->CFGR, SW0);
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR, SW1);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <RCC_u8SystemClkInitialization+0x134>)
 80011a2:	f023 0302 	bic.w	r3, r3, #2
 80011a6:	6093      	str	r3, [r2, #8]
	SET_BIT(RCC->CFGR, SW1);
	
	#else
	#error "Wrong SW Configuration"
	#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <RCC_u8Enable>:

u8 RCC_u8Enable (u8 u8Bus, u8 u8Peripheral)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
	u8 u8ErrorState = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
	
	if(u8Peripheral < 32) // Check Range
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	2b1f      	cmp	r3, #31
 80011d0:	d84a      	bhi.n	8001268 <RCC_u8Enable+0xb0>
	{
		switch (u8Bus)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d843      	bhi.n	8001262 <RCC_u8Enable+0xaa>
 80011da:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <RCC_u8Enable+0x28>)
 80011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e0:	080011f5 	.word	0x080011f5
 80011e4:	0800120b 	.word	0x0800120b
 80011e8:	08001221 	.word	0x08001221
 80011ec:	08001237 	.word	0x08001237
 80011f0:	0800124d 	.word	0x0800124d
		{
			case RCC_AHB1: SET_BIT(RCC->AHB1ENR, u8Peripheral); break;
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <RCC_u8Enable+0xc4>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	79ba      	ldrb	r2, [r7, #6]
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	4611      	mov	r1, r2
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <RCC_u8Enable+0xc4>)
 8001204:	430b      	orrs	r3, r1
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	e030      	b.n	800126c <RCC_u8Enable+0xb4>
			case RCC_AHB2: SET_BIT(RCC->AHB2ENR, u8Peripheral); break;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <RCC_u8Enable+0xc4>)
 800120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120e:	79ba      	ldrb	r2, [r7, #6]
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	4611      	mov	r1, r2
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <RCC_u8Enable+0xc4>)
 800121a:	430b      	orrs	r3, r1
 800121c:	6353      	str	r3, [r2, #52]	; 0x34
 800121e:	e025      	b.n	800126c <RCC_u8Enable+0xb4>
			case RCC_APB1: SET_BIT(RCC->APB1ENR, u8Peripheral); break;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <RCC_u8Enable+0xc4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	79ba      	ldrb	r2, [r7, #6]
 8001226:	2101      	movs	r1, #1
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	4611      	mov	r1, r2
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <RCC_u8Enable+0xc4>)
 8001230:	430b      	orrs	r3, r1
 8001232:	6413      	str	r3, [r2, #64]	; 0x40
 8001234:	e01a      	b.n	800126c <RCC_u8Enable+0xb4>
			case RCC_APB2: SET_BIT(RCC->APB2ENR, u8Peripheral); break;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <RCC_u8Enable+0xc4>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	4611      	mov	r1, r2
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <RCC_u8Enable+0xc4>)
 8001246:	430b      	orrs	r3, r1
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	e00f      	b.n	800126c <RCC_u8Enable+0xb4>
			case RCC_AHB1LPENR: SET_BIT(RCC->AHB1LPENR, u8Peripheral); break;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <RCC_u8Enable+0xc4>)
 800124e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001250:	79ba      	ldrb	r2, [r7, #6]
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	4611      	mov	r1, r2
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <RCC_u8Enable+0xc4>)
 800125c:	430b      	orrs	r3, r1
 800125e:	6513      	str	r3, [r2, #80]	; 0x50
 8001260:	e004      	b.n	800126c <RCC_u8Enable+0xb4>
			default: u8ErrorState = RCC_ErrorBusRangeRCC; break;
 8001262:	2302      	movs	r3, #2
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e001      	b.n	800126c <RCC_u8Enable+0xb4>
		}
	}
	
	else
		u8ErrorState = RCC_ErrorPeripheralRangeRCC; // Out of Range
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
		
	return u8ErrorState;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <USART_voidInitialization>:
void (*USART_USART1Function)(void) = NULL;
void (*USART_USART2Function)(void) = NULL;
void (*USART_USART6Function)(void) = NULL;

void USART_voidInitialization(USART_Initialization *InitializatioStruct, USART_ClockInitialization *ClockInitializatioStruct, USART_MemoryMap *USARTx)
{
 8001280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001284:	b090      	sub	sp, #64	; 0x40
 8001286:	af00      	add	r7, sp, #0
 8001288:	63f8      	str	r0, [r7, #60]	; 0x3c
 800128a:	63b9      	str	r1, [r7, #56]	; 0x38
 800128c:	637a      	str	r2, [r7, #52]	; 0x34

	// set the baud rate
	switch(InitializatioStruct->Oversampling)
 800128e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001290:	7a9b      	ldrb	r3, [r3, #10]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <USART_voidInitialization+0x1c>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d075      	beq.n	8001386 <USART_voidInitialization+0x106>
 800129a:	e0da      	b.n	8001452 <USART_voidInitialization+0x1d2>
	{
		case USART_OVER_SAMPLING_16 : USARTx->BRR = UART_BRR_SAMPLING16(USART_PCLK, InitializatioStruct->BaudRate); break;
 800129c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80012b2:	4629      	mov	r1, r5
 80012b4:	008b      	lsls	r3, r1, #2
 80012b6:	4621      	mov	r1, r4
 80012b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80012bc:	4621      	mov	r1, r4
 80012be:	008a      	lsls	r2, r1, #2
 80012c0:	a197      	add	r1, pc, #604	; (adr r1, 8001520 <USART_voidInitialization+0x2a0>)
 80012c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c6:	f7fe ff87 	bl	80001d8 <__aeabi_uldivmod>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4b96      	ldr	r3, [pc, #600]	; (8001528 <USART_voidInitialization+0x2a8>)
 80012d0:	fba3 2302 	umull	r2, r3, r3, r2
 80012d4:	095b      	lsrs	r3, r3, #5
 80012d6:	011c      	lsls	r4, r3, #4
 80012d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	623b      	str	r3, [r7, #32]
 80012e0:	627a      	str	r2, [r7, #36]	; 0x24
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012ee:	4649      	mov	r1, r9
 80012f0:	008b      	lsls	r3, r1, #2
 80012f2:	4641      	mov	r1, r8
 80012f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80012f8:	4641      	mov	r1, r8
 80012fa:	008a      	lsls	r2, r1, #2
 80012fc:	a188      	add	r1, pc, #544	; (adr r1, 8001520 <USART_voidInitialization+0x2a0>)
 80012fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001302:	f7fe ff69 	bl	80001d8 <__aeabi_uldivmod>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4b87      	ldr	r3, [pc, #540]	; (8001528 <USART_voidInitialization+0x2a8>)
 800130c:	fba3 1302 	umull	r1, r3, r3, r2
 8001310:	095b      	lsrs	r3, r3, #5
 8001312:	2164      	movs	r1, #100	; 0x64
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	3332      	adds	r3, #50	; 0x32
 800131e:	4a82      	ldr	r2, [pc, #520]	; (8001528 <USART_voidInitialization+0x2a8>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	095b      	lsrs	r3, r3, #5
 8001326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800132a:	441c      	add	r4, r3
 800132c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2200      	movs	r2, #0
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	61fa      	str	r2, [r7, #28]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001342:	4649      	mov	r1, r9
 8001344:	008b      	lsls	r3, r1, #2
 8001346:	4641      	mov	r1, r8
 8001348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800134c:	4641      	mov	r1, r8
 800134e:	008a      	lsls	r2, r1, #2
 8001350:	a173      	add	r1, pc, #460	; (adr r1, 8001520 <USART_voidInitialization+0x2a0>)
 8001352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001356:	f7fe ff3f 	bl	80001d8 <__aeabi_uldivmod>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4b72      	ldr	r3, [pc, #456]	; (8001528 <USART_voidInitialization+0x2a8>)
 8001360:	fba3 1302 	umull	r1, r3, r3, r2
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	2164      	movs	r1, #100	; 0x64
 8001368:	fb01 f303 	mul.w	r3, r1, r3
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	3332      	adds	r3, #50	; 0x32
 8001372:	4a6d      	ldr	r2, [pc, #436]	; (8001528 <USART_voidInitialization+0x2a8>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	18e2      	adds	r2, r4, r3
 8001380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	e065      	b.n	8001452 <USART_voidInitialization+0x1d2>
		case USART_OVER_SAMPLING_8  : USARTx->BRR = UART_BRR_SAMPLING8(USART_PCLK, InitializatioStruct->BaudRate) ; break;
 8001386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	461c      	mov	r4, r3
 800138e:	4615      	mov	r5, r2
 8001390:	1923      	adds	r3, r4, r4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	eb45 0305 	adc.w	r3, r5, r5
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800139e:	a160      	add	r1, pc, #384	; (adr r1, 8001520 <USART_voidInitialization+0x2a0>)
 80013a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013a4:	f7fe ff18 	bl	80001d8 <__aeabi_uldivmod>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4b5e      	ldr	r3, [pc, #376]	; (8001528 <USART_voidInitialization+0x2a8>)
 80013ae:	fba3 2302 	umull	r2, r3, r3, r2
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	011c      	lsls	r4, r3, #4
 80013b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	469a      	mov	sl, r3
 80013be:	4693      	mov	fp, r2
 80013c0:	eb1a 030a 	adds.w	r3, sl, sl
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	eb4b 030b 	adc.w	r3, fp, fp
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013d0:	a153      	add	r1, pc, #332	; (adr r1, 8001520 <USART_voidInitialization+0x2a0>)
 80013d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013d6:	f7fe feff 	bl	80001d8 <__aeabi_uldivmod>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4b52      	ldr	r3, [pc, #328]	; (8001528 <USART_voidInitialization+0x2a8>)
 80013e0:	fba3 1302 	umull	r1, r3, r3, r2
 80013e4:	095b      	lsrs	r3, r3, #5
 80013e6:	2164      	movs	r1, #100	; 0x64
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	3332      	adds	r3, #50	; 0x32
 80013f2:	4a4d      	ldr	r2, [pc, #308]	; (8001528 <USART_voidInitialization+0x2a8>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001400:	441c      	add	r4, r3
 8001402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2200      	movs	r2, #0
 8001408:	4698      	mov	r8, r3
 800140a:	4691      	mov	r9, r2
 800140c:	eb18 0308 	adds.w	r3, r8, r8
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	eb49 0309 	adc.w	r3, r9, r9
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800141c:	a140      	add	r1, pc, #256	; (adr r1, 8001520 <USART_voidInitialization+0x2a0>)
 800141e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001422:	f7fe fed9 	bl	80001d8 <__aeabi_uldivmod>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <USART_voidInitialization+0x2a8>)
 800142c:	fba3 1302 	umull	r1, r3, r3, r2
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	2164      	movs	r1, #100	; 0x64
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	3332      	adds	r3, #50	; 0x32
 800143e:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <USART_voidInitialization+0x2a8>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	18e2      	adds	r2, r4, r3
 800144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	bf00      	nop
	}

	USARTx->CR1 = (InitializatioStruct->Oversampling << OVER8)     |
 8001452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001454:	7a9b      	ldrb	r3, [r3, #10]
 8001456:	03da      	lsls	r2, r3, #15
				  (InitializatioStruct->HardwareFlowControl << UE) |
 8001458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800145a:	7a5b      	ldrb	r3, [r3, #9]
 800145c:	035b      	lsls	r3, r3, #13
	USARTx->CR1 = (InitializatioStruct->Oversampling << OVER8)     |
 800145e:	431a      	orrs	r2, r3
				  (InitializatioStruct->DataWidth << M)            |
 8001460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001462:	791b      	ldrb	r3, [r3, #4]
 8001464:	031b      	lsls	r3, r3, #12
				  (InitializatioStruct->HardwareFlowControl << UE) |
 8001466:	431a      	orrs	r2, r3
				  (InitializatioStruct->Parity_Enable << PCE)      |
 8001468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800146a:	799b      	ldrb	r3, [r3, #6]
 800146c:	029b      	lsls	r3, r3, #10
				  (InitializatioStruct->DataWidth << M)            |
 800146e:	431a      	orrs	r2, r3
				  (InitializatioStruct->Parity_Selection << PS);
 8001470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001472:	79db      	ldrb	r3, [r3, #7]
 8001474:	025b      	lsls	r3, r3, #9
				  (InitializatioStruct->Parity_Enable << PCE)      |
 8001476:	4313      	orrs	r3, r2
 8001478:	461a      	mov	r2, r3
	USARTx->CR1 = (InitializatioStruct->Oversampling << OVER8)     |
 800147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147c:	60da      	str	r2, [r3, #12]
	
	switch (InitializatioStruct->TransferDirection)
 800147e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001480:	7a1b      	ldrb	r3, [r3, #8]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d020      	beq.n	80014c8 <USART_voidInitialization+0x248>
 8001486:	2b02      	cmp	r3, #2
 8001488:	dc2b      	bgt.n	80014e2 <USART_voidInitialization+0x262>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <USART_voidInitialization+0x214>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d00d      	beq.n	80014ae <USART_voidInitialization+0x22e>
 8001492:	e026      	b.n	80014e2 <USART_voidInitialization+0x262>
	{
		case USART_TX_ONLY: SET_BIT(USARTx->CR1, TE); CLR_BIT(USARTx->CR1, RE); break;
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f043 0208 	orr.w	r2, r3, #8
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f023 0204 	bic.w	r2, r3, #4
 80014a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	e019      	b.n	80014e2 <USART_voidInitialization+0x262>
		case USART_RX_ONLY: SET_BIT(USARTx->CR1, RE); CLR_BIT(USARTx->CR1, TE); break;
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f043 0204 	orr.w	r2, r3, #4
 80014b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f023 0208 	bic.w	r2, r3, #8
 80014c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	e00c      	b.n	80014e2 <USART_voidInitialization+0x262>
		case USART_TX_RX:   SET_BIT(USARTx->CR1, TE); SET_BIT(USARTx->CR1, RE); break;
 80014c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f043 0208 	orr.w	r2, r3, #8
 80014d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f043 0204 	orr.w	r2, r3, #4
 80014dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	bf00      	nop
	}
	
	USARTx->CR2 = (InitializatioStruct->StopBits << STOP)			   |
 80014e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e4:	795b      	ldrb	r3, [r3, #5]
 80014e6:	031a      	lsls	r2, r3, #12
				  (ClockInitializatioStruct->ClockEnable << CLKEN)     |
 80014e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	02db      	lsls	r3, r3, #11
	USARTx->CR2 = (InitializatioStruct->StopBits << STOP)			   |
 80014ee:	431a      	orrs	r2, r3
				  (ClockInitializatioStruct->ClockPhase << CPHA)       |
 80014f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	025b      	lsls	r3, r3, #9
				  (ClockInitializatioStruct->ClockEnable << CLKEN)     |
 80014f6:	431a      	orrs	r2, r3
				  (ClockInitializatioStruct->ClockPolarity << CPOL)    |
 80014f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	029b      	lsls	r3, r3, #10
				  (ClockInitializatioStruct->ClockPhase << CPHA)       |
 80014fe:	431a      	orrs	r2, r3
				  (ClockInitializatioStruct->LastBitClockPulse << LBCL);
 8001500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	021b      	lsls	r3, r3, #8
				  (ClockInitializatioStruct->ClockPolarity << CPOL)    |
 8001506:	4313      	orrs	r3, r2
 8001508:	461a      	mov	r2, r3
	USARTx->CR2 = (InitializatioStruct->StopBits << STOP)			   |
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	611a      	str	r2, [r3, #16]

	USARTx->SR = 0;
 800150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	bf00      	nop
 8001516:	3740      	adds	r7, #64	; 0x40
 8001518:	46bd      	mov	sp, r7
 800151a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800151e:	bf00      	nop
 8001520:	17d78400 	.word	0x17d78400
 8001524:	00000000 	.word	0x00000000
 8001528:	51eb851f 	.word	0x51eb851f

0800152c <USART_Enable>:

void USART_Enable(USART_MemoryMap *USARTx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, UE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	60da      	str	r2, [r3, #12]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <USART_voidTransmitByte>:
{
	CLR_BIT(USARTx->CR1, UE);
}

void USART_voidTransmitByte (USART_MemoryMap *USARTx, u8 u8Byte)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
//	while ( GET_BIT(USARTx->SR, TXE) == 0 );
		
	USARTx->DR = u8Byte;
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	605a      	str	r2, [r3, #4]
	
	while ( GET_BIT(USARTx->SR, TC) == 0);
 800155e:	bf00      	nop
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f8      	beq.n	8001560 <USART_voidTransmitByte+0x14>
	
	CLR_BIT(USARTx->SR, TC);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	601a      	str	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <USART_u8TransmitArraySynch>:
		Iterator++;
	}
}

void USART_u8TransmitArraySynch(USART_MemoryMap *USARTx, u8* ptru8DataArray, u32 u32Length)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
	if ( ptru8DataArray != NULL )
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d017      	beq.n	80015c8 <USART_u8TransmitArraySynch+0x42>
	{
       for (u8 Counter = 0 ; (ptru8DataArray[Counter] != '\0') || (Counter <= u32Length); Counter++)
 8001598:	2300      	movs	r3, #0
 800159a:	75fb      	strb	r3, [r7, #23]
 800159c:	e00a      	b.n	80015b4 <USART_u8TransmitArraySynch+0x2e>
    	   USART_voidTransmitByte(USARTx, ptru8DataArray[Counter]);
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff ffcf 	bl	800154c <USART_voidTransmitByte>
       for (u8 Counter = 0 ; (ptru8DataArray[Counter] != '\0') || (Counter <= u32Length); Counter++)
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	3301      	adds	r3, #1
 80015b2:	75fb      	strb	r3, [r7, #23]
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1ee      	bne.n	800159e <USART_u8TransmitArraySynch+0x18>
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d2ea      	bcs.n	800159e <USART_u8TransmitArraySynch+0x18>
	}
}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <USART_u8ReceiveByteSynchBlocking>:
		
	return Data;
}

void USART_u8ReceiveByteSynchBlocking (USART_MemoryMap *USARTx, u8 *ptru8Data)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	if ( ptru8Data!= NULL )
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <USART_u8ReceiveByteSynchBlocking+0x2a>
	{
		while ( ( GET_BIT(USARTx->SR, RXNE) == 0 ) );
 80015e0:	bf00      	nop
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f8      	beq.n	80015e2 <USART_u8ReceiveByteSynchBlocking+0x12>

		*ptru8Data = USARTx->DR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	701a      	strb	r2, [r3, #0]
	}
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <USART_voidReceiveArraySynch>:

void USART_voidReceiveArraySynch  (USART_MemoryMap *USARTx , u8 *ptru8DataArray, u8 u8Size)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	4613      	mov	r3, r2
 8001612:	71fb      	strb	r3, [r7, #7]
	if ( ptru8DataArray != NULL )
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d010      	beq.n	800163c <USART_voidReceiveArraySynch+0x36>
	{
       for (u8 Counter = 0; Counter < u8Size; Counter++)
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
 800161e:	e009      	b.n	8001634 <USART_voidReceiveArraySynch+0x2e>
    	   USART_u8ReceiveByteSynchBlocking(USARTx, &ptru8DataArray[Counter]);
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	4413      	add	r3, r2
 8001626:	4619      	mov	r1, r3
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff ffd1 	bl	80015d0 <USART_u8ReceiveByteSynchBlocking>
       for (u8 Counter = 0; Counter < u8Size; Counter++)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	3301      	adds	r3, #1
 8001632:	75fb      	strb	r3, [r7, #23]
 8001634:	7dfa      	ldrb	r2, [r7, #23]
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3f1      	bcc.n	8001620 <USART_voidReceiveArraySynch+0x1a>
	}
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <USART1_IRQHandler>:
	USART_USART6Function = pvvUSART6Function;
}

/** ISR of USART1 **/
void USART1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	USART1->SR = 0 ;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <USART1_IRQHandler+0x14>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
	USART_USART1Function();
 800164e:	4b03      	ldr	r3, [pc, #12]	; (800165c <USART1_IRQHandler+0x18>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4798      	blx	r3
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40011000 	.word	0x40011000
 800165c:	20000028 	.word	0x20000028

08001660 <USART2_IRQHandler>:

/** ISR of USART2 **/
void USART2_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	USART2->SR = 0 ;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <USART2_IRQHandler+0x14>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
	USART_USART2Function();
 800166a:	4b03      	ldr	r3, [pc, #12]	; (8001678 <USART2_IRQHandler+0x18>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4798      	blx	r3
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40014400 	.word	0x40014400
 8001678:	2000002c 	.word	0x2000002c

0800167c <USART6_IRQHandler>:

/** ISR of USART6 **/
void USART6_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	USART6->SR = 0 ;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <USART6_IRQHandler+0x14>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
	USART_USART6Function();
 8001686:	4b03      	ldr	r3, [pc, #12]	; (8001694 <USART6_IRQHandler+0x18>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4798      	blx	r3
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40011400 	.word	0x40011400
 8001694:	20000030 	.word	0x20000030

08001698 <main>:
USART_ClockInitialization UARTCLOCK = { USART_DISABLE,
										USART_ClockPolarity_Outside_SteadyLow,
										USART_ClockPhase_FirstTransition,
										USART_LastBitClkPulse_LastDataNotOutput};
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	/***** RCC Configurations *****/
	RCC_u8SystemClkInitialization();
 800169c:	f7ff fcf0 	bl	8001080 <RCC_u8SystemClkInitialization>

	RCC_u8Enable(RCC_AHB1, RCC_GPIOA);		// Enable Port A
 80016a0:	2100      	movs	r1, #0
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff fd88 	bl	80011b8 <RCC_u8Enable>
	RCC_u8Enable (RCC_APB2, RCC_USART1);	// Enable USART1
 80016a8:	2104      	movs	r1, #4
 80016aa:	2004      	movs	r0, #4
 80016ac:	f7ff fd84 	bl	80011b8 <RCC_u8Enable>

	/***** CRC Configurations *****/
	RCC_u8Enable (RCC_AHB1, RCC_CRCEN);
 80016b0:	210c      	movs	r1, #12
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff fd80 	bl	80011b8 <RCC_u8Enable>

	/***** Push Button Configurations *****/
	GPIO_u8SetGPIOPinMode (GPIO_PORTA, GPIO_PIN0, GPIO_MODER_INPUT);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2001      	movs	r0, #1
 80016be:	f7ff faf1 	bl	8000ca4 <GPIO_u8SetGPIOPinMode>
	GPIO_u8SetPullResMode (GPIO_PORTA, GPIO_PIN0, GPIO_PUPDR_PULLUP);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2100      	movs	r1, #0
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff fb6e 	bl	8000da8 <GPIO_u8SetPullResMode>

	/***** USART Configurations *****/
	GPIO_u8SetGPIOPinMode (GPIO_PORTA, GPIO_PIN9, GPIO_MODER_ALTERNATE);
 80016cc:	2202      	movs	r2, #2
 80016ce:	2109      	movs	r1, #9
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff fae7 	bl	8000ca4 <GPIO_u8SetGPIOPinMode>
	GPIO_u8SetGPIOPinMode (GPIO_PORTA, GPIO_PIN10, GPIO_MODER_ALTERNATE);
 80016d6:	2202      	movs	r2, #2
 80016d8:	210a      	movs	r1, #10
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff fae2 	bl	8000ca4 <GPIO_u8SetGPIOPinMode>
	GPIO_voidSetAlternativeFunction(GPIO_PORTA, GPIO_PIN9, AF7);
 80016e0:	2207      	movs	r2, #7
 80016e2:	2109      	movs	r1, #9
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fbe1 	bl	8000eac <GPIO_voidSetAlternativeFunction>
	GPIO_voidSetAlternativeFunction(GPIO_PORTA, GPIO_PIN10, AF7);
 80016ea:	2207      	movs	r2, #7
 80016ec:	210a      	movs	r1, #10
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff fbdc 	bl	8000eac <GPIO_voidSetAlternativeFunction>

	USART_voidInitialization(&UART, &UARTCLOCK, USART1);
 80016f4:	4a05      	ldr	r2, [pc, #20]	; (800170c <main+0x74>)
 80016f6:	4906      	ldr	r1, [pc, #24]	; (8001710 <main+0x78>)
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <main+0x7c>)
 80016fa:	f7ff fdc1 	bl	8001280 <USART_voidInitialization>
	USART_Enable(USART1);
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <main+0x74>)
 8001700:	f7ff ff14 	bl	800152c <USART_Enable>
//	FMI_voidLock();

	while(1)
	{
		/***** Bootloader *****/
		BL_FeatchHostCmd();
 8001704:	f7fe feea 	bl	80004dc <BL_FeatchHostCmd>
 8001708:	e7fc      	b.n	8001704 <main+0x6c>
 800170a:	bf00      	nop
 800170c:	40011000 	.word	0x40011000
 8001710:	20000034 	.word	0x20000034
 8001714:	20000000 	.word	0x20000000

08001718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800171c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	; (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	; (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001746:	f000 f811 	bl	800176c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174a:	f7ff ffa5 	bl	8001698 <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   r0, =_estack
 8001750:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800175c:	080017f8 	.word	0x080017f8
  ldr r2, =_sbss
 8001760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001764:	20000038 	.word	0x20000038

08001768 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>
	...

0800176c <__libc_init_array>:
 800176c:	b570      	push	{r4, r5, r6, lr}
 800176e:	4d0d      	ldr	r5, [pc, #52]	; (80017a4 <__libc_init_array+0x38>)
 8001770:	4c0d      	ldr	r4, [pc, #52]	; (80017a8 <__libc_init_array+0x3c>)
 8001772:	1b64      	subs	r4, r4, r5
 8001774:	10a4      	asrs	r4, r4, #2
 8001776:	2600      	movs	r6, #0
 8001778:	42a6      	cmp	r6, r4
 800177a:	d109      	bne.n	8001790 <__libc_init_array+0x24>
 800177c:	4d0b      	ldr	r5, [pc, #44]	; (80017ac <__libc_init_array+0x40>)
 800177e:	4c0c      	ldr	r4, [pc, #48]	; (80017b0 <__libc_init_array+0x44>)
 8001780:	f000 f820 	bl	80017c4 <_init>
 8001784:	1b64      	subs	r4, r4, r5
 8001786:	10a4      	asrs	r4, r4, #2
 8001788:	2600      	movs	r6, #0
 800178a:	42a6      	cmp	r6, r4
 800178c:	d105      	bne.n	800179a <__libc_init_array+0x2e>
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	f855 3b04 	ldr.w	r3, [r5], #4
 8001794:	4798      	blx	r3
 8001796:	3601      	adds	r6, #1
 8001798:	e7ee      	b.n	8001778 <__libc_init_array+0xc>
 800179a:	f855 3b04 	ldr.w	r3, [r5], #4
 800179e:	4798      	blx	r3
 80017a0:	3601      	adds	r6, #1
 80017a2:	e7f2      	b.n	800178a <__libc_init_array+0x1e>
 80017a4:	080017f0 	.word	0x080017f0
 80017a8:	080017f0 	.word	0x080017f0
 80017ac:	080017f0 	.word	0x080017f0
 80017b0:	080017f4 	.word	0x080017f4

080017b4 <memset>:
 80017b4:	4402      	add	r2, r0
 80017b6:	4603      	mov	r3, r0
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d100      	bne.n	80017be <memset+0xa>
 80017bc:	4770      	bx	lr
 80017be:	f803 1b01 	strb.w	r1, [r3], #1
 80017c2:	e7f9      	b.n	80017b8 <memset+0x4>

080017c4 <_init>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	bf00      	nop
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr

080017d0 <_fini>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	bf00      	nop
 80017d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d6:	bc08      	pop	{r3}
 80017d8:	469e      	mov	lr, r3
 80017da:	4770      	bx	lr
